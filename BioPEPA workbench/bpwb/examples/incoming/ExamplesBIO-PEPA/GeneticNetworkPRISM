//Genetic network (MM)

//model
stochastic
//definition of levels
const int Nd = 1;
const int Nm = 1;
const int Np = 2;
const int Npd = 1;

//definition of steps
const double Hd = 1;
const double Hm = 1.0;
const double Hp = 30.0;
const double Hpd = 30.0;

// Rates
const double r3 = 0.0039;
const double r2 = 0.043;
const double r4 = 0.0007;
const double r5i = 0.5;
const double r5 = 0.025;
const double v = 2.19;
const double k = 356;

// Species
module d
d: [0..Nd] init Nd;
[a1] d>0-> (d'=d);
endmodule

module m
m: [0..Nm] init 0;
[a1] m<Nm-> (m'=m+1);
[a2] m>0 -> (m'=m);
[a3] m>0 -> (m'=m-1);
endmodule

module p
p: [0..Np] init 0;
[a2] p<Np-> (p'=p+1);
[a4] p>0 -> (p'=p-1);
[a5] p>=2 -> (p'=p-2);
[a5i] p<=(Np-2) -> (p'=p+2);
endmodule

module pd
pd: [0..Npd] init 0;
[a5i] pd>0 -> (pd'=pd-1);
[a5] pd<Npd -> (pd'=pd+1);
endmodule


module rates
dummy: bool init true;
[a1] dummy = true -> (v/(k  + pd*Hpd)): (dummy' = dummy);
[a2] dummy = true & m>0 & p<Np-> r2*m*Hm: (dummy' = dummy);
[a3] dummy = true & m>0-> r3*m*Hm: (dummy' = dummy);
[a4] dummy = true & p>0 -> r4*p*Hp: (dummy' = dummy);
[a5] dummy = true & p>=2 -> r5*p*Hp*p*Hp: (dummy' = dummy);
[a5i] dummy = true & p<=(Np-2) & pd>0 -> r5i*Hpd*pd: (dummy' = dummy);
endmodule

rewards
true: (p/(p +pd));
endrewards

//rewards
//true: (p*Hp)/(p*Hp + pd*Hpd);
//endrewards


