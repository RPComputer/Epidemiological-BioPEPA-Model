#!/bin/bash
# TO BE CONFIGURED BY THE USER:
export PATH=/cygdrive/c/cygwin/bin:$PATH
export BPWB=.
export STOCHKITTEST=../stochkit/test/
export STOCHKIT=${STOCHKITTEST}/BIOPEPA/DM
export MOSMLWIN=/cygdrive/c/mosml/bin/camlrunm
export GNUPLOT=/usr/bin/
export GNUPLOTWIN=/cygdrive/c/gnuplot/bin
export GRAPHVIZWIN=/cygdrive/c/graphviz/bin

if grep -v "\#" biopepa.cfg | grep --silent "biopepa.simulation.stoptime"
then
  str="$(grep -v "\#" biopepa.cfg | grep 'biopepa.simulation.stoptime')"
  STOPTIME=$(cut -d ':' -f2- <<< $str)
else
  STOPTIME=" 100"
fi

if grep -v "\#" biopepa.cfg | grep "use.custom.functions: true" --silent
then
  CUSTOMFUNCTIONS= true
else
  CUSTOMFUNCTIONS= false
fi

if grep -v "\#" biopepa.cfg | grep "use.stochkit.simulator" --silent
then
  str="$(grep -v "\#" biopepa.cfg | grep 'use.stochkit.simulator')"
  USESTOCHKIT=$(cut -d ':' -f2- <<< $str)
else
  USESTOCHKIT= true
fi

if grep -v "\#" biopepa.cfg | grep "use.sundials.simulator" --silent
then
  str="$(grep -v "\#" biopepa.cfg | grep 'use.sundials.simulator')"
  USESUNDIALS=$(cut -d ':' -f2- <<< $str)
else
  USESUNDIALS= false
fi

if grep -v "\#" biopepa.cfg | grep "use.custom.functions.filename"
then
  str="$(grep -v "\#" biopepa.cfg | grep 'use.custom.functions.filename')"
  CUSTOMFUNCTIONSCONFIG=$(cut -d ':' -f2- <<< $str)
else
  CUSTOMFUNCTIONSCONFIG="custom_functions_config.json"
fi

#Solver selection
str="$(grep -v "\#" biopepa.cfg | grep 'biopepa.simulator')"
SOLVER=$(cut -d ':' -f2- <<< $str)

rm -f biopepawb.err
for i in *.dat
do  
    rm -v $i
done 2> /dev/null

for i in *.gnu 
do  
    rm -v $i
done 2> /dev/null

for i in *.cpp
do  
    mv -v $i cpp
done 2> /dev/null

for i in *.biopepa ; do  
    b=$(basename ${i} .biopepa)
    if test -e ${b}.csv 
    then dos2unix ${b}.csv > /dev/null 2> /dev/null
    fi
    if test -e ${b}.parameters
    then dos2unix ${b}.parameters > /dev/null 2> /dev/null
    fi
    rm -f `basename $i .biopepa`.pdf 
    chmod +x ${BPWB}/bin/biopepawb
    if test -e ${MOSMLWIN} 
    then ${MOSMLWIN} ${BPWB}/bin/biopepawb $i 
    else ${BPWB}/bin/biopepawb $i 
    fi 


if test -e biopepawb.err 
then exit
fi

echo "Preparing simulators code."
for i in *.cpp ; do
  mv biopepa.h stochkit 2> /dev/null
  cp -v $i stochkit/ProblemDefinition.cpp
done
echo "Stochkit code ready."
mkdir -p matlab
mkdir -p sundials
mkdir -p vfgen
for i in *.vf 
do
    b=$(basename ${i} .vf)
    echo "Running VFgen on $b for Sundials"
    if test -x vfgen.exe
    then
      ./vfgen.exe cvode:func=yes,demo=yes $i
    else
      vfgen cvode:func=yes,demo=yes,version=2.5.0 $i
    fi
    mv ${b}_cv.h sundials
    mv ${b}_cv.c sundials
    mv ${b}_cvdemo.c sundials
done
echo "Complete run of VFgen on $b for Sundials"

if $CUSTOMFUNCTIONS
then
  echo "Preparing simulators code: upgrading code with custom functions"
  python3 insert_custom_functions.py -c $CUSTOMFUNCTIONSCONFIG
fi

if $USESTOCHKIT
then
  for i in *.cpp ; do
    mkdir -p ${STOCHKITTEST}/BIOPEPA
    mkdir -p ${STOCHKITTEST}/BIOPEPA/DM
    cp -R stochkit/* ${STOCHKIT}
    echo "Compiling stochkit simulator."
    ( cd ${STOCHKIT} ; make > /dev/null )
    if test -e ${STOCHKIT}/stochkit 
    then 
      echo "Running stochkit simulator."
      c=$(basename $i .cpp)
      ${STOCHKIT}/stochkit ${c} 
      ${STOCHKIT}/stochkit ${c} 2> ${c}.endtimes
      sort -n ${c}*.dat > ${c}_stochkit_results_0.dat
  #     awk '{ print $5 }' ${c}.endtimes | sort -n | cat -n > ${c}_endtimes.dat
  #     rm -f ${c}.endtimes
    else
      echo "C++ compilation failed.  Exiting."
      exit
    fi 
  done
fi

if $USESUNDIALS
then
  for i in *.vf 
  do
    mv Makefile-${b}_cvdemo sundials
    (cd sundials ; make -f  Makefile-${b}_cvdemo )
    echo "Running sundials simulator."
    (./sundials/${b}_cvdemo "stoptime=${STOPTIME}" > sundials/${b}_sundials_results_0.dat)
    mv ./sundials/*.dat ./
    mv $i vfgen
  done
else
  for i in *.vf 
  do
    mv $i vfgen
  done
fi


for i in *.gnu ; do  
    echo Plotting $i
    if test -e ${GNUPLOT}/gnuplot
    then 
	${GNUPLOT}/gnuplot $i
    else
      if test -e ${GNUPLOTWIN}/pgnuplot
      then 
	cat $i | ${GNUPLOTWIN}/pgnuplot
      else
	gnuplot $i
      fi
    fi
done

mkdir -p prism 
for i in *.sm
do
    mv $i prism
done
for i in *.csl
do
    mv $i prism
done

#if grep -v "\#" biopepa.cfg | egrep --silent "png|pbm"
#then
#   echo "You've got graphs."
#   if gthumb . 2> /dev/null
#   then 
#       echo "Those were the graphs."
#   else
#       echo "Why don't you have a look at them sometime?"
#   fi
#fi

for i in *.dot
do
  echo Running Dot over $i
  b=$(basename ${i} .dot)
  if test -e ${GRAPHVIZWIN}/dot
  then 
    ${GRAPHVIZWIN}/dot -Tpng $i -o $b.png
    ${GRAPHVIZWIN}/dot -Tpdf $i -o $b.pdf
  else
    dot -Tpng $i -o $b.png
    dot -Tps $i -o $b.eps
    chmod +x ./eps2pdf 
    ./eps2pdf -f -x $b.eps > $i.log 
    grep ok $i.log
  fi
  mv $i dot
  mv $b.eps dot
  mv $b.pdf dot
done  2> /dev/null

# for i in *.eps
# do  
#     echo Converting $i
#     chmod +x ./eps2pdf 
#     ./eps2pdf -f -x $i > $i.log 
#     grep ok $i.log 
# done 2> /dev/null


(mkdir -p dizzy ; mv *.dizzy dizzy 2> /dev/null)

if grep -v "\#" biopepa.cfg | grep "keep.data.files" | grep --silent "true" 
then
  mkdir -p dat 
  for i in *.dat ; do  
      mv $i dat
  done
  for i in ./sundials/*.dat ; do  
      mv $i dat
  done 2> /dev/null
  echo "Results in DAT format in the 'dat' folder."
else
  for i in *.dat ; do  
      rm $i 
  done 2> /dev/null
fi

(mkdir -p eps ; mv *.eps eps 2> /dev/null)
(mkdir -p pdf ; mv *.pdf pdf 2> /dev/null)

(rm -f *.plt)

if grep -v "\#" biopepa.cfg | grep --silent "png"
then 
  if grep -v "\#" biopepa.cfg | grep "thumbnails" | grep --silent "true"
  then
    mkdir -p thumbnails
    for f in *.png
    do
      if ! ( convert -size 100x75 $f -thumbnail 100x75 thumbnails/$f 2> /dev/null )
      then cp $f thumbnails/
      fi
    done
    echo "Thumbnails in the 'thumbnails' folder."
  fi
  mkdir -p png
  for i in *.png 
  do  
    mv $i png
  done 2> /dev/null
  echo "Results in PNG format in the 'png' folder."
fi

if grep -v "\#" biopepa.cfg | grep --silent "pbm"
then 
  mkdir -p pbm
  for i in *.pbm ; do  
    mv $i pbm
  done 2> /dev/null
  echo "Results in PBM format in the 'pbm' folder."
fi

if grep -v "\#" biopepa.cfg | grep --silent "svg"
then 
  mkdir -p svg
  for i in *.svg ; do  
    mv $i svg
  done 2> /dev/null
  echo "Results in SVG format in the 'svg' folder."
fi

if test -e /usr/bin/pdfjoin
then
  for i in *.biopepa ; do 
    b=$(basename $i .biopepa)
    if test -e ${b}.pdfjoin
    then 
      echo "Writing ${b}.pdf" 
      mv ${b}.pdfjoin ${b}.pdf
    fi
  done
fi

chmod +x ${BPWB}/bin/biopeparep
for i in *.biopepa
do 
    if test -e ${MOSMLWIN} 
    then ${MOSMLWIN} ${BPWB}/bin/biopeparep $i
    else ${BPWB}/bin/biopeparep $i
    fi 
done

if test -s $b.tex
then
  pdflatex $b > /dev/null
  echo "Report in $b.pdf"
else
   echo "No LaTeX report written."
fi

for i in *.aux
do
    rm -f $i
done

if test -s $b.html
then
  echo "Webpage in $b.html"
else
  echo "No webpage written."
fi

mkdir -p tex
for i in *.tex
do
   mv $i tex
done

mkdir -p cpp 
for i in *.cpp
do
   mv $i cpp
done

mkdir -p log 
for i in *.log
do
   mv $i log
done

mkdir -p gnu 
for i in *.gnu
do
   mv $i gnu
done

done

echo "Exiting Bio-PEPA workbench."


