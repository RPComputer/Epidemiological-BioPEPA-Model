//*****************************************************************************|
//*  FILE:    Random.cpp
//*
//*  AUTHOR:  Andrew Hall
//*
//*  CREATED: January 15, 2003
//*
//*  LAST MODIFIED: Aug 11, 2004
//*             BY: Yang Cao
//*             TO: Add Normal Random Number Generator
//*  
//*  LAST MODIFIED: Tue Jul 27 11:00:11 PDT 2004 
//*             BY: slampoud 
//*             TO: added SPRNG support
//*
//*  SUMMARY:
//*
//*
//*  NOTES:
//*
//*
//*  TO DO:
//*
//*
//*****************************************************************************|
//       1         2         3         4         5         6         7         8
//345678901234567890123456789012345678901234567890123456789012345678901234567890
#include "Random.h"
#include "ranlib.h"
#include "IEEE.h"
#include <stdlib.h>
#include <time.h>
#include <stdio.h>
#include <iostream>
/* allow for the possibility that sprng doesn't exist */
#ifndef _NO_SPRNG
#define SIMPLE_SPRNG
#include "sprng.h"
#define RFUNC sprng()
#else
#define RFUNC random()/(RAND_MAX+1.0)
#endif
/*
namespace imp{

  struct Seeder 
  {
    // Drew's code 
    
    //Seeder()
    //{
      // Initialize C rand with time of day
      //time_t curTime = time(0);
      //srand(static_cast<unsigned int>(curTime));

      // Initialize ranlib's generator with time of day
      //long seed1, seed2;
      //phrtsd(ctime(&curTime), &seed1, &seed2);
      //setall(seed1, seed2);

      //setall(static_cast<long>(curTime), static_cast<long>(curTime)*3);
    //}
    
    Seeder()
    {
      time_t curTime = time(0);
#ifndef _NO_SPRNG
      init_sprng(SPRNG_LCG, static_cast<int>(curTime) , SPRNG_DEFAULT);
#else
      //std::cerr << "Ranlib!!!!\n\n";      
      srandom(static_cast<unsigned int>(curTime));
#endif
      long seed1, seed2;
      phrtsd(ctime(&curTime), &seed1, &seed2);
      setall(seed1, seed2);
    }
  };

  static const Seeder seeder;
}
*/

namespace CSE {
  namespace Math {

    void Seeder(int RanSeed, time_t curTime)
    {
      //time_t curTime = time(0);
#ifndef _NO_SPRNG
      //init_sprng(SPRNG_LCG, static_cast<int>(curTime) , SPRNG_DEFAULT);
      init_sprng(SPRNG_LCG, RanSeed , SPRNG_DEFAULT);
#else
      //std::cerr << "Ranlib!!!!\n\n";
      //srandom(static_cast<unsigned int>(curTime));
      srandom(RanSeed);
#endif
      long seed1, seed2;
      phrtsd(ctime(&curTime), &seed1, &seed2);
      setall(seed1, seed2);
    }


    double UniformRandom()
    {
      return (double) RFUNC;
      // Drew's code
      //      return ((double)rand())/((double)RAND_MAX);
    }


    double NormalRandom()
    {
      // Only generate standard random number
      return snorm();
    }

    double NormalRandom(double mean, double var)
    { 
	return (mean + sqrt(var)*snorm()); 
    } 

    double PoissonRandom(double mean)
    {
      // Call into ranlib for the Poisson deviate.
      if (mean == 0) { 
	return 0; 
      } else if (mean > 1e3) { 
	return (mean + sqrt(mean)*snorm()); 
      } else if (mean > 1e6) { 
	return mean; 
      } else 
        return static_cast<double>(ignpoi(static_cast<float>(mean)));
    }


    Vector PoissonRandom(const Vector& means)
    {
      int size = means.Size();
      Vector rv(size);

      for (int i = 0; i < size; ++i) {
        rv(i) = PoissonRandom(means(i));
// 	PoissonRandom(0.001); // added by Yang Cao on 4/27/2005
		// The reason to add this line is because the poisson random number
		// generated by ranlib is biased if the mean values has big difference 
		// in magnitude. This part should be changed later. 
      }

      return rv;
    }
    


  } // Close CSE::Math namespace
} // Close CSE namespace

